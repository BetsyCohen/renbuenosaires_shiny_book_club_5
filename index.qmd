---
format:
  revealjs: 
    theme: [default, styles.scss]
    width: 1280
    height: 720
    include-after-body: 
      - "all-the-js-code.html"
    revealjs-plugins:
      - codewindow
echo: false
code-line-numbers: false
footer: "Realizado con el <a href='https://github.com/EmilHvitfeldt/talk-socalrug-hackathon-feature-engineering' target='_blank'>template de emilhvitfeldt</a> para el <a href='https://github.com/RLadies-BA/mastering-shiny' target='_blank'>Club de lectura Mastering Shiny</a>  "
editor: 
  markdown: 
    wrap: 72
---

## User feedback {.theme-title .center}

### Mastering Shiny Book Club

Betsy Cohen & Ariana Bardauil

## Objetivos de este encuentro

::: {.speech .pink}
![](assets/cat-theme/profile-01.svg) Recapitular encuentros anteriores
:::

:::: fragment
::: {.speech .purple .right}
Cap√≠tulo 8: User feedback ![](assets/cat-theme/profile-02.svg)
:::
::::

# {.theme-section2}

::: {.r-fit-text style="transform: translateY(-15rem);"}
¬øQu√© vimos en los encuentros anteriores?
:::


# Encuentro 1 {.theme-section3}

## Cap√≠tulos 1 y 2: Basic APP & Basic UI

:::: fragment
::: r-fit-text
Construimos nuestra

[primera aplicaci√≥n]{.pink-shadow}

en [shiny]{.blue-shadow}
:::
::::

## Estructura b√°sica

<br>

![](assets/cat-theme/head-01.svg){.absolute bottom="0" right="0"
width="150" height="150"}

::::::: columns
:::: column
::: codewindow
``` r
library(shiny)

ui <- fluidPage(
  textInput("name", "¬øC√≥mo te llam√°s?"),
  textOutput("greeting")
)

server <- function(input, output, session) {
  output$greeting <- renderText({
    paste0("Hola ", input$name, "!")
  })
}

shinyApp(ui, server)
```
:::
::::

:::: column
::: incremental
-   **ui** define la interfaz de usuario.
-   **server** define la l√≥gica del servidor (c√≥mo responde la app).
-   **shinyApp(ui, server)** renderiza la app.
:::
::::
:::::::

## Estructura b√°sica

![](assets/cat-theme/head-07.svg){.absolute top="-50" right="300"
width="150" height="150"}

<br>

![](imagenes/1.01.basic_app.png){fig-align="center" width="913"}





## UI basica

![](assets/cat-theme/head-24.svg){.absolute top="-50" right="300"}


::: {.spacer style="height:70%;"}

[fluidPage()]{.brown-text} organiza los componentes en una p√°gina adaptable.

Vimos algunas [entradas o inputs]{.pink-text} como `textInput()` (texto libre), `numericInput()` (n√∫meros), `actionButton()` (botones) y `sliderInput()`. 

Y, [salidas (outputs)]{.pink-text} como `textOutput()` que permiten la l√≥gica reactiva desde el `server()` usando `render...` o `eventReactive` (para los botones).
:::






# Encuentro 2 {.theme-section4}


## hola

<!-- ```{r} -->

<!-- DiagrammeR::grViz(" -->
<!-- digraph shiny_reactivity { -->

<!--   graph [layout = dot, rankdir = LR] -->

<!--   node [shape = box, style = filled, fontname = Helvetica, fontsize = 12, width=3] -->

<!--   // Estilos de nodos por tipo -->
<!--   input  [label = 'üü¢ input$...\\n\\nüß© Valor reactivo\\nSe actualiza cuando\\nel usuario interact√∫a', fillcolor = '#D1F2EB'] -->

<!--   render [label = 'üü° render*()\\n\\n‚öôÔ∏è C√°lculo reactivo\\nReacciona a cambios\\nde inputs', fillcolor = '#FCF3CF'] -->

<!--   output [label = 'üîµ output$...\\n\\nüñ•Ô∏è Resultado\\nMuestra lo generado\\npor render*()', fillcolor = '#D6EAF8'] -->

<!--   // Conexiones -->
<!--   input -> render [label = 'cambio de input'] -->
<!--   render -> output [label = 'render genera resultado'] -->
<!-- } -->
<!-- ") -->
<!-- ``` -->

## hola
Shiny est√° construido sobre un modelo de programaci√≥n reactivo:

"Cuando un valor de entrada cambia, los resultados relacionados se actualizan autom√°ticamente."

Esto significa que no ten√©s que decirle a Shiny ‚Äúcu√°ndo‚Äù ejecutar algo: si un valor cambia y otro depende de √©l, se vuelve a calcular autom√°ticamente.