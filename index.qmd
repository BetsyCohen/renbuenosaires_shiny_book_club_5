---
format:
  revealjs: 
    theme: [default, styles.scss]
    width: 1280
    height: 720
    include-after-body: 
      - "all-the-js-code.html"
    revealjs-plugins:
      - codewindow
echo: false
code-line-numbers: false
footer: "Realizado con el <a href='https://github.com/EmilHvitfeldt/talk-socalrug-hackathon-feature-engineering' target='_blank'>template de emilhvitfeldt</a> para el <a href='https://github.com/RLadies-BA/mastering-shiny' target='_blank'>Club de lectura Mastering Shiny</a>"
editor: 
  markdown: 
    wrap: 72
---

## User feedback {.theme-title .center}

### Mastering Shiny Book Club

Betsy Cohen & Ariana Bardauil

## Objetivos de este encuentro

::: {.speech .pink}
![](assets/cat-theme/profile-01.svg) Recapitular encuentros anteriores
:::

:::: fragment
::: {.speech .purple .right}
Capítulo 8: User feedback ![](assets/cat-theme/profile-02.svg)
:::
::::

#  {.theme-section2}

::: {.r-fit-text style="transform: translateY(-15rem);"}
¿Qué vimos en los encuentros anteriores?
:::

# Encuentro 1 {.theme-section3}

Basic APP & Basic UI

## Capítulos 1 y 2: Basic APP & Basic UI

:::: fragment
::: r-fit-text
Construimos nuestra

[primera aplicación]{.pink-shadow}

en [shiny]{.blue-shadow}
:::
::::

## Estructura básica

<br>

![](assets/cat-theme/head-01.svg){.absolute bottom="0" right="0"
width="150" height="150"}

::::::: columns
:::: column
::: codewindow
``` r
library(shiny)

ui <- fluidPage(
  textInput("name", "¿Cómo te llamás?"),
  textOutput("greeting")
)

server <- function(input, output, session) {
  output$greeting <- renderText({
    paste0("Hola ", input$name, "!")
  })
}

shinyApp(ui, server)
```
:::
::::

:::: column
::: incremental
-   **ui** define la interfaz de usuario.
-   **server** define la lógica del servidor (cómo responde la app).
-   **shinyApp(ui, server)** renderiza la app.
:::
::::
:::::::

## Estructura básica

![](assets/cat-theme/head-07.svg){.absolute top="-50" right="300"
width="150" height="150"}

<br>

![](imagenes/1.01.basic_app.png){fig-align="center" width="913"}

<!-- ## UI basica -->

<!-- ![](assets/cat-theme/head-24.svg){.absolute top="-50" right="300"} -->

<!-- ::: {.spacer style="height:70%;"} -->
<!-- [fluidPage()]{.brown-text} organiza los componentes en una página -->
<!-- adaptable. -->

<!-- Vimos algunas [entradas o inputs]{.pink-text} como `textInput()` (texto -->
<!-- libre), `numericInput()` (números), `actionButton()` (botones) y -->
<!-- `sliderInput()`. -->

<!-- Y, [salidas (outputs)]{.pink-text} como `textOutput()` que permiten la -->
<!-- lógica reactiva desde el `server()` usando `render...` o `eventReactive` -->
<!-- (para los botones). -->
<!-- ::: -->

# Encuentro 2 {.theme-section4}

Basic reactivity

## Basic reactivity

![](assets/cat-theme/head-30.svg){.absolute top="-50" right="300"
width="120" height="120"} ![](assets/cat-theme/head-31.svg){.absolute
top="-50" right="120" width="150" height="120"}

![](imagenes/2.01.reactividad.png){fig-align="center" width="723"}

![](imagenes/2.02.users.png){fig-align="center" width="516"}

## Programación declarativa

![](assets/cat-theme/head-07.svg){.absolute top="-50" right="300"
width="150" height="150"} ![](assets/cat-theme/head-08.svg){.absolute
top="-50" right="150" width="150" height="150"}

<br>

Shiny usa [programación declarativa]{.pink-text}

> No le indicamos qué hacer sino qué queremos lograr.

[Son aplicaciones perezosas]{.pink-text}: solo actualizan los outputs
visibles, y solo cuando es necesario.

::::: columns
::: {.column width="20%"}
![](https://cdn.pixabay.com/animation/2023/04/28/18/34/18-34-10-554_512.gif){fig-align="center"
width="128" height="109"}
:::

::: {.column width="80%"}
Si no está vinculado a una salida visible el [código puede no ejecutarse
nunca]{.brown-text}
:::
:::::

# Encuentro 3 {.theme-section5}

Workflow

## Control de flujo & debuggeo

![](assets/cat-theme/turso-03.svg){.absolute top=150 right=100 width="450" height="450"}

¿Qué puedo usar para saber [qué le pasa a mi app]{.blue-text} ? 

::::: columns
::: {.column width="50%"}
::: codewindow
```r
print() cat()
```
:::

::: codewindow
```r
# Abre una app interactiva
eventReactive(input$go, {
  browser() 
  input$a + input$b
})
```
:::

::: codewindow
```r
# Al principio del script
reactlog::reactlog_enable()
# Luego de ejecutar la APP y cerrarla:
shiny::reactlogShow()
```
:::
:::

::: {.column width="50%"}
  
:::
:::::

# Encuentro 4 {.theme-section1}
Layout, themes, HTML

## Layouts (diseños de página)

![](assets/cat-theme/turso-02.svg){.absolute top=50 right=50 width="450" height="450"}


::: {.spacer style="height:70%;"}

[Página única]{.brown-text}

`fluidPage()`, `fixedPage()` ,`fillPag()` (página)

`sidebarLayout()` , `fluidRow()` , `column()` (diseño)

[Varias páginas]{.pink-text}

`navbarPage()`  (página)

`tabsetPanel()`, `tabPanel()` , `navlistPanel()` ,`navbarMenu()` (diseño)
:::

## Aplicación de estilos 

::::: columns
::: {.column width="50%"}

**HTML**

::: codewindow
```r
<span style="color:hotpink;">texto de prueba</span>
```
:::

**CSS**

::: codewindow

```r
.pink-text {
  color: darken($theme-pink, 10%);
  font-weight: bold;
}
```

:::

[texto de prueba]{.pink-text}
:::

::: {.column width="50%"}

**THEME**

::: codewindow
```r
library(shiny)
library(bslib)

ui <- fluidPage(
  theme = bs_theme(bootswatch = "minty"),
  h2("App con tema Minty"),
  sliderInput("x", "Elegí un número", 1, 100, 50),
  textOutput("valor")
)

server <- function(input, output, session) {
  output$valor <- renderText({
    paste("Número:", input$x)
  })
}

```
:::
:::
:::::

# Encuentro 5 {.theme-section6}
[HOY HOY HOY HOY HOY]{.brown-text}

#  {.theme-section7}

::: {.r-fit-text style="transform: translateY(-15rem);"}
[User feedback]{.brown-shadow}
:::